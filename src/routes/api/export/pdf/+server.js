import PDFDocument from 'pdfkit';
import { getTodosForList, getList } from '$lib/db.js';

export async function POST({ request, locals }) {
	const { user } = locals;

	if (!user) {
		return new Response('Unauthorized', { status: 401 });
	}

	try {
		const { listId } = await request.json();

		if (!listId) {
			return new Response('List ID is required', { status: 400 });
		}

		// Get list details
		const list = getList(listId, user.id);
		if (!list) {
			return new Response('List not found or access denied', { status: 404 });
		}

		// Get todos for the list
		const todos = getTodosForList(listId, user.id);

		// Create a PDF document
		const doc = new PDFDocument({ margin: 50 });

		// Buffer to collect the PDF data
		const chunks = [];
		doc.on('data', (chunk) => chunks.push(chunk));

		// Add title
		doc.fontSize(24).text(list.name, { align: 'center' });
		doc.moveDown();
		doc.fontSize(12).text(`Exported on: ${new Date().toLocaleString()}`, { align: 'center' });
		doc.moveDown(2);

		// Group todos by parent/child
		const rootTodos = todos.filter((t) => !t.parent_todo_id);
		const todosByParent = todos.reduce((acc, t) => {
			if (t.parent_todo_id) {
				if (!acc[t.parent_todo_id]) {
					acc[t.parent_todo_id] = [];
				}
				acc[t.parent_todo_id].push(t);
			}
			return acc;
		}, {});

		// Render todos
		for (const todo of rootTodos) {
			// Check if we need a new page
			if (doc.y > 700) {
				doc.addPage();
			}

			// Task checkbox and text
			const checkbox = todo.completed ? '☑' : '☐';
			doc
				.fontSize(12)
				.font('Helvetica-Bold')
				.text(`${checkbox} ${todo.text}`, { continued: false });

			// Task details
			const details = [];
			if (todo.priority && todo.priority !== 'medium') {
				details.push(`Priority: ${todo.priority}`);
			}
			if (todo.due_date) {
				details.push(`Due: ${new Date(todo.due_date).toLocaleString()}`);
			}
			if (todo.assigned_to_username) {
				details.push(`Assigned to: ${todo.assigned_to_username}`);
			}
			if (todo.notes) {
				details.push(`Notes: ${todo.notes}`);
			}

			if (details.length > 0) {
				doc
					.fontSize(10)
					.font('Helvetica')
					.fillColor('gray')
					.text(`  ${details.join(' • ')}`, { indent: 10 });
			}

			// Render subtasks
			const subtasks = todosByParent[todo.id] || [];
			if (subtasks.length > 0) {
				doc.moveDown(0.3);
				for (const subtask of subtasks) {
					const subCheckbox = subtask.completed ? '☑' : '☐';
					doc
						.fontSize(10)
						.fillColor('black')
						.text(`    ${subCheckbox} ${subtask.text}`, { indent: 20 });
				}
			}

			doc.fillColor('black').moveDown(0.8);
		}

		// Add footer
		const pages = doc.bufferedPageRange();
		for (let i = 0; i < pages.count; i++) {
			doc.switchToPage(i);
			doc
				.fontSize(8)
				.text(
					`Page ${i + 1} of ${pages.count} • Generated by Tido`,
					50,
					doc.page.height - 50,
					{ align: 'center' }
				);
		}

		// Finalize the PDF
		doc.end();

		// Wait for PDF generation to complete
		const pdfBuffer = await new Promise((resolve) => {
			doc.on('end', () => {
				resolve(Buffer.concat(chunks));
			});
		});

		return new Response(pdfBuffer, {
			headers: {
				'Content-Type': 'application/pdf',
				'Content-Disposition': `attachment; filename="${list.name}-export-${new Date().toISOString().split('T')[0]}.pdf"`
			}
		});
	} catch (error) {
		console.error('PDF export error:', error);
		return new Response(error.message, { status: 500 });
	}
}
